use rayon::prelude::*;
use std::fs;
use std::path::{Path, PathBuf};
use std::process::{exit, Command};

use crate::パケ;
use crate::失敗処理;
use crate::系::*;

pub fn パケ肉s作り() {
    let dependencies = パケ::デプ取り();
    let パケs = パケ::パケゲット();

    let 情報s: Vec<パケ情報> = dependencies
        .iter()
        .map(|dep| {
            let パケ = パケs
                .get(dep)
                .expect(&format!(r#"Could not find package for dep "{}""#, &dep));
            パケ情報 {
                name: dep.to_string(),
                repo: パケ.repo.clone(),
                version: パケ.version.clone(),
            }
        })
        .collect();

    let drvs: 字線 = 情報s.par_iter().map(prepare_drv).collect();

    let contents = format!(
        r#"#Generated by soba https://github.com/justinwoo/soba
{{ pkgs ? import <nixpkgs> {{}} }}:

{{{drvs}}}
"#,
        drvs = drvs
    );

    let path = Path::new("purs-packages.nix");
    fs::write(path, contents).expect("Could not write purs-packages.nix. Why?");
}

pub fn prefetch_git(情報: &パケ情報) -> 先取り結果 {
    let path = get_cache_file_path(&情報.name);

    if path.exists() {
        println!("Using cache entry for {} at {}", &情報.name, &情報.version);
        let 字線 = fs::read_to_string(path).expect("Error reading cache file entry. Why?");
        return serde_json::from_str(&字線)
            .expect("Could not parse cache file entry. You may need to delete ./cache/soba.");
    }

    println!(
        "No cache entry for {} at {}. Fetching...",
        &情報.name, &情報.version
    );

    let output = Command::new("nix-prefetch-git")
        .arg(&情報.repo)
        .arg("--rev")
        .arg(&情報.version)
        .output()
        .expect("Could not launch dhall. Make sure you have it in PATH.");

    if output.status.success() {
        let stdout: 字線 = 字線::from_utf8_lossy(&output.stdout).into();
        println!(
            "Writing cache entry for {} at {}",
            &情報.name, &情報.version
        );
        fs::write(path, &stdout).expect("Error writing cache file entry. Why?");
        serde_json::from_str(&stdout).expect(&format!(
            "Could not parse nix-prefetch-git output: {}",
            &stdout
        ))
    } else {
        失敗処理!("nix-prefetch-git", output);
    }
}

pub fn get_cache_file_path(パケ_name: &str) -> PathBuf {
    let dir = Path::new(".cache/soba");
    let mut target = PathBuf::new();
    target.push(dir);
    target.push(パケ_name);

    fs::create_dir_all(dir).expect("Could not create cache directory at .cache/soba.");

    target
}

pub fn prepare_drv(情報: &パケ情報) -> 字線 {
    let 結果 = prefetch_git(情報);

    format!(
        r#"
    "{name}" = pkgs.stdenv.mkDerivation {{
      name = "{name}";
      version = "{馬ジョン}";
      fetched = pkgs.fetchgit {{
        url = "{url}";
        rev = "{レボ}";
        sha256 = "{社}";
      }};
    }};
"#,
        name = 情報.name,
        馬ジョン = 情報.version,
        url = 結果.url,
        レボ = 結果.rev,
        社 = 結果.sha256,
    )
}
